package com.gladys.cybuverse.Helpers;import android.app.Application;import android.content.Context;import android.content.SharedPreferences;import com.gladys.cybuverse.CyberBullyingAwarenessGame.ProfanityChecker.ProfanityFilter;import com.gladys.cybuverse.Models.User;import com.gladys.cybuverse.R;import com.gladys.cybuverse.Utils.GeneralUtils.Funcs;import com.gladys.cybuverse.Utils.GeneralUtils.collections.JSONData;import com.google.firebase.FirebaseApp;import com.google.firebase.auth.FirebaseAuth;import java.io.BufferedReader;import java.io.InputStream;import java.io.InputStreamReader;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;public class TechupApplication extends Application {    public static final String DAILY_NOTIFICATION = "daily-notification";    public static final String CHAT_NOTIFICATION = "chat-notification";    public static final String USES_SOUND = "uses-sound";    public static final String WALLPAPER_URI = "wallpaper-uri";    public static final String APP_SETTINGS = "app_settings";    public static final String LAST_USER = "last_user";    public static final String CURRENT_USER = "current_user";    public static final String SKIP_LOGIN = "skip_login";    public static final String LOGGED_IN_USER = "logged_in_user";    public static final int MODE_PRIVATE = 0;    public static Context mContext;    private static ProfanityFilter filter;    private User user;    private Map<String, Object> globalVariables;    public TechupApplication() {        mContext = this;        this.globalVariables = new HashMap<>();    }    public User getUser() {        return user == null ? getLastUserToLogin() : user;    }    public void setUser(User user) {        this.user = user;        setLastUserToLogin(user);    }    public static ProfanityFilter getProfanityFilter() {        if (filter == null) {            try {                InputStream single = mContext.getResources().openRawResource(R.raw.bad_single_words);                InputStream group = mContext.getResources().openRawResource(R.raw.bad_group_words);                List<String> wordList = readInputStream(single);                List<String> phraseList = readInputStream(group);                filter = new ProfanityFilter(wordList, phraseList);                Helper.log("profanity filter built");            } catch (Exception e) {                e.printStackTrace();                Helper.log("error building profanity filter");            }        }        return filter;    }    private static List<String> readInputStream(InputStream stream) {        ArrayList<String> list = new ArrayList<>();        try {            String word;            BufferedReader reader = new BufferedReader(new InputStreamReader(stream));            while ((word = reader.readLine()) != null) {                list.add(word);            }        } catch (Exception e) {            e.printStackTrace();        }        return list;    }    public Map<String, Object> getGlobalVariables() {        return globalVariables;    }    public Object getGlobalVariable(String varName) {        return globalVariables.get(varName);    }    public void addGlobalVariable(String varName, Object value) {        globalVariables.put(varName, value);    }    @Override    public void onCreate() {        FirebaseApp.initializeApp(getApplicationContext());        super.onCreate();    }    public boolean rememberUser() {        SharedPreferences rememberPreference = getSharedPreferences(LOGGED_IN_USER, 0);        return rememberPreference.getString(SKIP_LOGIN, "no").equals("yes");    }    public String getRememberedEmail() {        return getSharedPreferences(LOGGED_IN_USER, MODE_PRIVATE).getString("email", null);    }    public String getRememberedPassword() {        return getSharedPreferences(LOGGED_IN_USER, MODE_PRIVATE).getString("password", null);    }    public String getCurrentUserEmail() {        return getSharedPreferences(CURRENT_USER, MODE_PRIVATE).getString("email", null);    }    public String getCurrentUserPassword() {        return getSharedPreferences(CURRENT_USER, MODE_PRIVATE).getString("password", null);    }    public boolean getDailyNotificationPreference() {        return getSharedPreferences(APP_SETTINGS, MODE_PRIVATE).getBoolean(DAILY_NOTIFICATION, true);    }    public boolean getChatNotificationPreference() {        return getSharedPreferences(APP_SETTINGS, MODE_PRIVATE).getBoolean(CHAT_NOTIFICATION, true);    }    public boolean getUsesSoundPreference() {        return getSharedPreferences(APP_SETTINGS, MODE_PRIVATE).getBoolean(USES_SOUND, true);    }    public String getWallPaperPreference() {        return getSharedPreferences(APP_SETTINGS, MODE_PRIVATE).getString(WALLPAPER_URI, "");    }    public void setAppSettings(String key, Object value) {        SharedPreferences rememberPreference = getSharedPreferences(APP_SETTINGS, MODE_PRIVATE);        SharedPreferences.Editor rememberEditor = rememberPreference.edit();        if (key.equals(WALLPAPER_URI))            rememberEditor.putString(WALLPAPER_URI, value.toString());        else            rememberEditor.putBoolean(key, (Boolean) value);        rememberEditor.apply();    }    public void deactivateRememberUserPreference() {        SharedPreferences rememberPreference = getSharedPreferences(LOGGED_IN_USER, MODE_PRIVATE);        SharedPreferences.Editor rememberEditor = rememberPreference.edit();        rememberEditor.putString(SKIP_LOGIN, "no");        rememberEditor.putString("email", null);        rememberEditor.putString("password", null);        rememberEditor.apply();    }    public void activateRememberUserPreference(String email, String password) {        SharedPreferences rememberPreference = getSharedPreferences(LOGGED_IN_USER, MODE_PRIVATE);        SharedPreferences.Editor rememberEditor = rememberPreference.edit();        rememberEditor.putString(SKIP_LOGIN, "yes");        rememberEditor.putString("email", email);        rememberEditor.putString("password", password);        rememberEditor.apply();    }    public void setCurrentUserPreference(String email, String password) {        SharedPreferences currentUserPreference = getSharedPreferences(CURRENT_USER, MODE_PRIVATE);        SharedPreferences.Editor userEditor = currentUserPreference.edit();        userEditor.putString("email", email);        userEditor.putString("password", password);        userEditor.apply();    }    private User getLastUserToLogin() {        SharedPreferences userPreference = getSharedPreferences(LAST_USER, MODE_PRIVATE);        if (FirebaseAuth.getInstance().getCurrentUser() != null &&                FirebaseAuth.getInstance().getCurrentUser().getUid().equals(userPreference.getString("uid", "null"))) {            User user = new User();            user.setEmail(userPreference.getString("email", user.getEmail()));            user.setGender(userPreference.getString("gender", user.getGender()));            user.setName(userPreference.getString("name", user.getName()));            user.setProfileUri(userPreference.getString("profile-uri", user.getProfileUri()));            try {                JSONData jsonData = new JSONData(userPreference.getString("info", "{}"));                final Map<String, Object> map = new HashMap<>();                jsonData.forEach(new Funcs.MapAction<Object, Object>() {                    @Override                    public void operate(Object key, Object value) {                        map.put(key.toString(), value);                    }                });                user.setInfo(map);            } catch (JSONData.JSONException e) {                e.printStackTrace();            }            return user;        }        return null;    }    private void setLastUserToLogin(User user) {        if (FirebaseAuth.getInstance().getCurrentUser() != null && user != null) {            SharedPreferences currentUserPreference = getSharedPreferences(LAST_USER, MODE_PRIVATE);            SharedPreferences.Editor userEditor = currentUserPreference.edit();            userEditor.putString("uid", FirebaseAuth.getInstance().getCurrentUser().getUid());            userEditor.putString("email", user.getEmail());            userEditor.putString("gender", user.getGender());            userEditor.putString("name", user.getName());            userEditor.putString("profile-uri", user.getProfileUri());            userEditor.putString("info", new JSONData(user.getInfo()).toString());            userEditor.apply();        }    }    public void resetCurrentUser() {        SharedPreferences currentUserPreference = getSharedPreferences(CURRENT_USER, MODE_PRIVATE);        SharedPreferences.Editor userEditor = currentUserPreference.edit();        userEditor.putString("email", null);        userEditor.putString("password", null);        userEditor.apply();    }}